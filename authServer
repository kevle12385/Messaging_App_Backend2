require('dotenv').config();
const express = require('express');
const PORT =  4000; // Make sure this line exists and sets PORT to 4000
const { MongoClient } = require('mongodb');
const { createAccount, loginFunction,  } = require('./functions');
const jwt = require('jsonwebtoken'); // Ensure you've imported jwt

const app = express();
const cors = require('cors');
const bodyParser = require('body-parser'); // Needed for Express versions < 4.16.0
app.use(express.json());

const uri = process.env.MONGODB_URI;
app.use(cors({
  origin: 'http://localhost:5173' // Only allow requests from this origin
}));


app.get('/', (req, res) => {
  res.send('Hello World!');
});


const client = new MongoClient(uri);


async function main(){
  try {
      // Connect to the MongoDB cluster
      await client.connect();
      await  listDatabases(client);
      // await loginFunction(client, "kevle12385@ymail.com", "555dog")
  } catch (e) {
      console.error(e);
  } finally {
      
  }
}

main().catch(console.error);

async function listDatabases(client){
  databasesList = await client.db().admin().listDatabases();

  console.log("Databases:");
  databasesList.databases.forEach(db => console.log(` - ${db.name}`));
};


app.post('/api/login', async (req, res) => {
    const { Email, Password } = req.body; // Extract email and password from the JSON body of the request
    
    try {
      const result = await loginFunction(client, Email, Password);
      if (result.length == 0) {
        return res.status(401).send("Login Incorrect"); 
      }
      
      const user = result[0];
      const payload = { userId: user._id.toString() };
      const accessToken = generateAccessToken(user);
      const refreshToken = jwt.sign(user, process.env.REFRESH_TOKEN_SECRET)
      
      await client.db("User").collection("User_information").updateOne(
        { _id: user._id }, // Filter condition to match the user document
        { $set: { refreshToken: refreshToken } } // Update operation
      );


      
      res.json({ accessToken:accessToken, refreshToken:refreshToken });
  
  
    } catch (error) {
      console.error("Error fetching account", error);
      res.status(500).send("Internal server error");
    }
    
  });

function generateAccessToken(user) {
    return jwt.sign(user, process.env.ACCESS_TOKEN_SECRET, {expiresIn: "15s"})
}

app.post('/api/token', async (req, res) => {
    const refreshToken = req.body.token;
    if (!refreshToken) return res.status(401).send("Refresh token is required");

    try {
        const payload = await validateRefreshToken(refreshToken);
        if (!payload) return res.status(403).send("Invalid refresh token");

        // Generate new tokens
        const accessToken = generateAccessToken({ name: payload.name });
        // Optionally generate a new refresh token here if you're rotating them

        res.json({ accessToken }); // , refreshToken: newRefreshToken if you're rotating
    } catch (error) {
        console.error("Error refreshing token", error);
        return res.status(500).send("Internal server error");
    }
});


async function validateRefreshToken(token) {
    try {
        const payload = jwt.verify(token, process.env.REFRESH_TOKEN_SECRET);
        // Look up the token in the database to ensure it's still valid
        const user = await findUserByRefreshToken(token); // Implement this function based on your DB
        return user ? payload : null;
    } catch (error) {
        return null; // Token validation failed
    }
}


app.listen(PORT, () => console.log(`Auth Server running on http://localhost:${PORT}`));

